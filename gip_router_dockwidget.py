# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GipRouterDockWidget
                                 A QGIS plugin
 Router for austrian official open government street graph
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-03
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Dominic Winkler
        email                : office@flexarts.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os


from PyQt5 import QtWidgets, uic
from PyQt5.QtCore import pyqtSignal, QSettings
from PyQt5.QtWidgets import QFileDialog, QApplication

from .rubber import RectangleMapTool


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gip_router_dockwidget_base.ui'))


class GipRouterDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    onloadFile = pyqtSignal(str)
    onDrawLayers = pyqtSignal(bool)
    onCalcRoute = pyqtSignal(int, int, int)
    onCalcArea = pyqtSignal(int, int, int, int)

    def __init__(self, parent=None, iface=None):
        """Constructor."""
        super(GipRouterDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.settings = QSettings()
        
        self.extentTool = RectangleMapTool(iface.mapCanvas())
        
        
        self.fileButton.clicked.connect(self.selectFile)
        self.loadButton.clicked.connect(self.loadFile)
        self.layerButton.clicked.connect(self.drawLayers)
        self.extentButton.toggled.connect(self.extendToggle)
        self.extentButton.toggled.connect(self.extendToggle)
        self.calcRouteButton.clicked.connect(self.calcRoute)
        self.calcAreaButton.clicked.connect(self.calcArea)

        self.initUi()

        # self.extentTool.onExtentChanged.connect(self.onExtentChanged)

    def initUi(self):
        self.isLoading = False
        self.useExtent = False
        self.showLayers = False
        self.fileEdit.setText('')
        self.progressBar.hide()
        self.loadedLabel.hide()
        self.layerButton.hide()
        self.extentButton.setChecked(False)
        self.extentButton.setDisabled(True)
        if self.settings.value("gip_router/idf_file"):
            self.selectedFile(self.settings.value("gip_router/idf_file"))

    def selectFile(self):
        filename, _ = QFileDialog.getOpenFileName(
            self, 'Open IDF File', "",
            'Text files (*.txt)',
            None)
        self.selectedFile(filename)
    
    def selectedFile(self, filename):
        if filename and len(filename) > 0:
            self.settings.setValue("gip_router/idf_file", filename)
            self.fileEdit.setText(filename)
            self.extentButton.setDisabled(False)

    def extendToggle(self, isChecked):
        self.useExtent = isChecked
        if isChecked:
            self.iface.mapCanvas().setMapTool(self.extentTool)
        else:
            self.extentTool.hideRect()
            self.iface.mapCanvas().unsetMapTool(self.extentTool)
    
    def handleFileProgress(self, progress):
        self.progressBar.setValue(progress)
        self.progressBar.update()
        QApplication.processEvents()

    def currentExtent(self):
        if self.useExtent:
            return self.extentTool.rectangle()
        else:
            return None

    def selectExtent(self):
        self.iface.mapCanvas().setMapTool(self.extentTool)

    def loadFile(self):
        self.fileEdit.setDisabled(True)
        self.fileButton.setDisabled(True)
        self.extentButton.setDisabled(True)
        self.progressBar.setValue(0)
        self.progressBar.show()
        self.layerButton.hide()
        self.onloadFile.emit(self.fileEdit.text())

    def loadedFile(self, statusText):
        self.progressBar.setValue(100)
        self.progressBar.hide()
        self.fileEdit.setDisabled(False)
        self.fileButton.setDisabled(False)
        self.extentButton.setDisabled(False)
        self.loadedLabel.setText(statusText)
        self.loadedLabel.show()
        self.layerButton.show()
        self.layerButton.setChecked(True)
        self.layerButton.setDisabled(False)
  
    def drawLayers(self, isChecked):
        #self.layerButton.setDisabled(True)
        self.onDrawLayers.emit(isChecked)
    
    def calcRoute(self):
        vehType = int(self.vehRouteCombo.currentIndex())
        start = int(self.startPointEdit.text())
        end = int(self.endPointEdit.text())
        self.onCalcRoute.emit(start, end, vehType)

    def calcArea(self):
        vehType = int(self.vehAreaCombo.currentIndex())
        threshold = int(self.thresholdEdit.text())
        poi1 = int(self.poi1Edit.text())
        poi2 = int(self.poi2Edit.text())
        self.onCalcArea.emit(poi1, poi2, vehType, threshold)

    def closeEvent(self, event):
        if self.extentTool:
            self.extentTool.hideRect()
            self.extentTool.deactivate()
        self.closingPlugin.emit()
        event.accept()
